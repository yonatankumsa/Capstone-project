{"ast":null,"code":"import axios from \"axios\"; // managing authentication based action types\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // login user\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Register user\n\nexport const register = _ref => {\n  let {\n    username,\n    password,\n    email\n  } = _ref;\n  return dispatch => {\n    // Headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // Request Body\n\n    const body = JSON.stringify({\n      username,\n      email,\n      password\n    });\n    axios.post(\"http://localhost:8000/api/auth/register\", body, config).then(res => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n}; // logout user\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  });\n}; // setup config with token\n\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"sources":["/Users/yonatankumsa/Desktop/GA-SEI/Capstone-project/frontend/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\n\n// managing authentication based action types\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\n\n// check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n// login user\nexport const login = (username, password) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n\n// Register user\nexport const register = ({ username, password, email }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, email, password });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/register\", body, config)\n    .then((res) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    });\n};\n\n// logout user\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    });\n};\n\n// setup config with token\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}